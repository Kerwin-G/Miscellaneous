#!/usr/bin/perl

# Description: a program to practice math problems, written in Perl 
#************************************************************************** 
$^W = 1; # turn on warnings
use strict; # behave!
# display the startup message
print "Welcome to the mathq program.\n";
print"*********************************\n";
print "To quit Mathq press Q and then hit the enter key\n";
print "\n";
my $user_wants_to_quit = 0;
#counts the amount of correct answers and also records 1 point per correct answer
my $score = 0;
#variable that counts incorrect answers
my $z = 0;
#for numbering of questions
my $count = 0;
# LOOP until the user wants to quit
until ($user_wants_to_quit) {
	$count+=1;
	# GENERATE A RANDOM MATH QUESTION AND SOLUTION
	# set first_num to a random integer in 0..9
	my $first_num = int(rand(10));
	# set second_num to a random integer in 0..9
	my $second_num = int(rand(10));
	my $question;
	my $solution;
	# pick a random integer from 0 to 1 and use it to choose operation 
	my $operator = int(rand(4));
	if ( $operator == 0 ) {
		# <<CREATE MULT QUESTION AND SOLUTION>> 
		$solution = $first_num * $second_num; 
		$question = "$first_num x $second_num = ";
	}
	elsif ( $operator == 1 && $second_num !=0 ) {
		# <<CREATE DIVISION QUESTION AND SOLUTION>>
		# this process also makes first number larger 
		$solution = $first_num * $second_num;
		# swap values of first_num and solution 
		($solution, $first_num) = ($first_num, $solution);
		$question = "$first_num / $second_num = ";
	}
	#first number always larger(no negative answers) and 0 - 0 possible
	elsif ( $operator == 2 && $first_num >= $second_num) {
		$solution= $first_num - $second_num; 
		$question = "$first_num - $second_num = ";}
	else {
		$solution= $first_num + $second_num;
		$question = "$first_num + $second_num = ";
	}
	# <<DISPLAY QUESTION AND GET VALID RESPONSE>>
	my $response;
	my $response_is_valid = 0; # set to FALSE
	until ( $response_is_valid ) {
		print "$count) $question?\n> "; # display question 
		$response = <STDIN>;
		chomp($response);
		print "\n";
		# <<CHECK IF RESPONSE IS VALID>
	if ( $response =~ m/^[0-9]+$/ or $response eq 'q'  or $response eq 'Q') {
			$response_is_valid = 1;
		}
	}
	# <<CHECK CORRECTNESS OF USER'S RESPONSE>>
	if ( ($response eq 'q') || ($response eq 'Q') ) {
		$user_wants_to_quit = 1;
    }
    else {
    	if ( $response == $solution ){
    		print "Correct!\n";
		print "\n";
		$score+=1;
        } 
	else {
			print "Incorrect: $question $solution \n";
			print "\n";
			$z+=1;
		}
	}
}

# Avoid divide by 0 error
if ( $score + $z != 0) { 
print "You answered $score out of ",$score + $z," questions correctly or ",$score/($score+$z)*100," %\n";
}
#exit message
print "Thank you for playing mathq.\n";
print "\n";
